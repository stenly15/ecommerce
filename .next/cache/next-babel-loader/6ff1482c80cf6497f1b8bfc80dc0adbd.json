{"ast":null,"code":"var _jsxFileName = \"/Users/mayrra/Workspace/hctive/ecommerce/pages/cart.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useSelector } from 'react-redux';\nimport Layout from '../components/layout';\nimport Header from '../components/header';\nimport CurrencyFormat from 'react-currency-format';\n\nconst CartList = ({\n  image,\n  name,\n  price,\n  quantity,\n  sum\n}) => __jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }\n}, __jsx(\"h4\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }\n}, name), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }\n}, \"Price : \", __jsx(CurrencyFormat, {\n  value: price,\n  displayType: 'text',\n  thousandSeparator: true,\n  prefix: 'Rp. ',\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 20\n  }\n})), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }\n}, \"Quantity: \", quantity), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }\n}, \"SubTotal: \", __jsx(CurrencyFormat, {\n  value: sum,\n  displayType: 'text',\n  thousandSeparator: true,\n  prefix: 'Rp. ',\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 22\n  }\n})), __jsx(\"button\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }\n}, \"Delete This Item\"));\n\nconst Cart = () => {\n  const cartItems = useSelector(state => {\n    const transformedCartItems = [];\n\n    for (const key in state.cart.items) {\n      transformedCartItems.push({\n        productId: key,\n        productName: state.cart.items[key].productName,\n        productPrice: state.cart.items[key].productPrice,\n        quantity: state.cart.items[key].quantity,\n        sum: state.cart.items[key].sum\n      });\n    }\n\n    return transformedCartItems;\n  });\n  const totalAmount = useSelector(state => state.cart.totalAmount);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }), cartItems !== [] && cartItems.map(item => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, __jsx(CartList, {\n    key: item.productId,\n    image: item.productImage,\n    name: item.productName,\n    price: item.productPrice,\n    quantity: item.quantity,\n    sum: item.sum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 25\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }\n  }, \"Grand Total: \", __jsx(CurrencyFormat, {\n    value: totalAmount,\n    displayType: 'text',\n    thousandSeparator: true,\n    prefix: 'Rp. ',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 42\n    }\n  }), \" \"))), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"Your cart is empty\"));\n};\n\nexport default Cart;","map":{"version":3,"sources":["/Users/mayrra/Workspace/hctive/ecommerce/pages/cart.js"],"names":["useSelector","Layout","Header","CurrencyFormat","CartList","image","name","price","quantity","sum","Cart","cartItems","state","transformedCartItems","key","cart","items","push","productId","productName","productPrice","totalAmount","map","item","productImage"],"mappings":"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","sourcesContent":["import { useSelector } from 'react-redux';\n\nimport Layout from '../components/layout';\nimport Header from '../components/header';\n\nimport CurrencyFormat from 'react-currency-format';\n\nconst CartList = ({ image, name, price, quantity, sum }) => (\n    <div>\n        <h4>{name}</h4>\n        <p>Price : <CurrencyFormat value={price} displayType={'text'} thousandSeparator={true} prefix={'Rp. '} /></p>\n        <p>Quantity: {quantity}</p>\n        <p>SubTotal: <CurrencyFormat value={sum} displayType={'text'} thousandSeparator={true} prefix={'Rp. '} /></p>\n        <button>Delete This Item</button>\n    </div>\n)\n\nconst Cart = () => {\n    const cartItems = useSelector(state => {\n        const transformedCartItems = [];\n        for (const key in state.cart.items) {\n            transformedCartItems.push({\n                productId: key,\n                productName: state.cart.items[key].productName,\n                productPrice: state.cart.items[key].productPrice,\n                quantity: state.cart.items[key].quantity,\n                sum: state.cart.items[key].sum\n            });\n        }\n        return transformedCartItems;\n    });\n\n    const totalAmount = useSelector(state => state.cart.totalAmount);\n    return (\n        <Layout>\n            <Header />\n            {\n                cartItems !== [] &&\n                cartItems.map(item =>\n                    <div>\n                        <CartList\n                            key={item.productId}\n                            image={item.productImage}\n                            name={item.productName}\n                            price={item.productPrice}\n                            quantity={item.quantity}\n                            sum={item.sum}\n                        />\n                        <h2>Grand Total: <CurrencyFormat value={totalAmount} displayType={'text'} thousandSeparator={true} prefix={'Rp. '} /> </h2>\n                    </div>\n                )\n            }\n            <h2>Your cart is empty</h2>\n\n\n        </Layout>\n    )\n}\n\n\nexport default Cart;"]},"metadata":{},"sourceType":"module"}