{"ast":null,"code":"var _jsxFileName = \"/Users/mayrra/Workspace/hctive/ecommerce/pages/cart.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useSelector, useDispatch } from 'react-redux';\nimport Layout from '../components/layout';\nimport Header from '../components/header';\nimport * as cartActions from \"../store/actions/cart\";\nimport CurrencyFormat from 'react-currency-format';\n\nconst CartList = ({\n  id,\n  image,\n  name,\n  price,\n  quantity,\n  sum\n}) => {\n  const dispatch = useDispatch();\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, name), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, \"Price : \", __jsx(CurrencyFormat, {\n    value: price,\n    displayType: 'text',\n    thousandSeparator: true,\n    prefix: 'Rp. ',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 24\n    }\n  })), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, \"Quantity: \", quantity), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, \"SubTotal: \", __jsx(CurrencyFormat, {\n    value: sum,\n    displayType: 'text',\n    thousandSeparator: true,\n    prefix: 'Rp. ',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 26\n    }\n  })), __jsx(\"button\", {\n    onClick: () => {\n      dispatch(cartActions.removeFromCart(key));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, \"Delete This Item\"));\n};\n\nconst Cart = () => {\n  const cartItems = useSelector(state => {\n    const transformedCartItems = [];\n\n    for (const key in state.cart.items) {\n      transformedCartItems.push({\n        productId: key,\n        productName: state.cart.items[key].productName,\n        productPrice: state.cart.items[key].productPrice,\n        quantity: state.cart.items[key].quantity,\n        sum: state.cart.items[key].sum\n      });\n    }\n\n    return transformedCartItems;\n  });\n  const totalAmount = useSelector(state => state.cart.totalAmount);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }), totalAmount === 0 ? __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 23\n    }\n  }, \"Your Cart is Empty\") : cartItems.map(item => __jsx(\"div\", {\n    key: item.productId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }\n  }, __jsx(CartList, {\n    id: item.productId,\n    image: item.productImage,\n    name: item.productName,\n    price: item.productPrice,\n    quantity: item.quantity,\n    sum: item.sum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 29\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 29\n    }\n  }, \"Grand Total: \", __jsx(CurrencyFormat, {\n    value: totalAmount,\n    displayType: 'text',\n    thousandSeparator: true,\n    prefix: 'Rp. ',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 46\n    }\n  }), \" \"))));\n};\n\nexport default Cart;","map":{"version":3,"sources":["/Users/mayrra/Workspace/hctive/ecommerce/pages/cart.js"],"names":["useSelector","useDispatch","Layout","Header","cartActions","CurrencyFormat","CartList","id","image","name","price","quantity","sum","dispatch","removeFromCart","key","Cart","cartItems","state","transformedCartItems","cart","items","push","productId","productName","productPrice","totalAmount","map","item","productImage"],"mappings":"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","sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\n\nimport Layout from '../components/layout';\nimport Header from '../components/header';\n\nimport * as cartActions from \"../store/actions/cart\";\n\nimport CurrencyFormat from 'react-currency-format';\n\nconst CartList = ({ id, image, name, price, quantity, sum }) => {\n    const dispatch = useDispatch();\n\n    return (\n        <div>\n            <h4>{name}</h4>\n            <p>Price : <CurrencyFormat value={price} displayType={'text'} thousandSeparator={true} prefix={'Rp. '} /></p>\n            <p>Quantity: {quantity}</p>\n            <p>SubTotal: <CurrencyFormat value={sum} displayType={'text'} thousandSeparator={true} prefix={'Rp. '} /></p>\n            <button onClick={() => { dispatch(cartActions.removeFromCart(key)) }}>Delete This Item</button>\n        </div>\n    )\n}\n\nconst Cart = () => {\n    const cartItems = useSelector(state => {\n        const transformedCartItems = [];\n        for (const key in state.cart.items) {\n            transformedCartItems.push({\n                productId: key,\n                productName: state.cart.items[key].productName,\n                productPrice: state.cart.items[key].productPrice,\n                quantity: state.cart.items[key].quantity,\n                sum: state.cart.items[key].sum\n            });\n        }\n        return transformedCartItems;\n    });\n\n    const totalAmount = useSelector(state => state.cart.totalAmount);\n\n    return (\n        <Layout>\n            <Header />\n            {\n                totalAmount === 0\n                    ? <h2>Your Cart is Empty</h2>\n                    : cartItems.map(item =>\n                        <div key={item.productId}>\n                            <CartList\n                                id={item.productId}\n                                image={item.productImage}\n                                name={item.productName}\n                                price={item.productPrice}\n                                quantity={item.quantity}\n                                sum={item.sum}\n                            />\n                            <h2>Grand Total: <CurrencyFormat value={totalAmount} displayType={'text'} thousandSeparator={true} prefix={'Rp. '} /> </h2>\n                        </div>\n                    )\n            }\n        </Layout>\n    )\n}\n\nexport default Cart;"]},"metadata":{},"sourceType":"module"}