{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_TO_CART } from \"../actions/cart\";\nimport { createReducer } from '@reduxjs/toolkit';\nconst initialState = {\n  items: {}\n};\nconst cartReducer = createReducer(initialState, {\n  [ADD_TO_CART]: (state, action) => {\n    const addedProduct = action.payload;\n    const productId = addedProduct.productId;\n    const productPrice = addedProduct.productPrice;\n    const productName = addedProduct.productName;\n    const productDescription = addedProduct.productDescription;\n    const productImage = addedProduct.productImage;\n    const productCategory = addedProduct.productCategory;\n    let updatedOrNewCartItem;\n\n    if (state.items[productId]) {\n      updatedOrNewCartItem = {\n        productId,\n        productName,\n        productPrice,\n        productDescription,\n        productImage,\n        productCategory,\n        quantity: state.items[productId].quantity + 1\n      };\n    } else {\n      updatedOrNewCartItem = {\n        productId,\n        productName,\n        productPrice,\n        productDescription,\n        productImage,\n        productCategory,\n        quantity: 1\n      };\n    }\n\n    return _objectSpread({}, state, {\n      items: _objectSpread({}, state.items, {\n        [productId]: updatedOrNewCartItem\n      })\n    });\n  }\n});\nexport default cartReducer;","map":{"version":3,"sources":["/Users/mayrra/Workspace/hctive/ecommerce/store/reducers/cart.js"],"names":["ADD_TO_CART","createReducer","initialState","items","cartReducer","state","action","addedProduct","payload","productId","productPrice","productName","productDescription","productImage","productCategory","updatedOrNewCartItem","quantity"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,iBAA5B;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,MAAMC,WAAW,GAAGH,aAAa,CAACC,YAAD,EAAe;AAC5C,GAACF,WAAD,GAAe,CAACK,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAMC,YAAY,GAAGD,MAAM,CAACE,OAA5B;AACA,UAAMC,SAAS,GAAGF,YAAY,CAACE,SAA/B;AACA,UAAMC,YAAY,GAAGH,YAAY,CAACG,YAAlC;AACA,UAAMC,WAAW,GAAGJ,YAAY,CAACI,WAAjC;AACA,UAAMC,kBAAkB,GAAGL,YAAY,CAACK,kBAAxC;AACA,UAAMC,YAAY,GAAGN,YAAY,CAACM,YAAlC;AACA,UAAMC,eAAe,GAAGP,YAAY,CAACO,eAArC;AAEA,QAAIC,oBAAJ;;AAEA,QAAIV,KAAK,CAACF,KAAN,CAAYM,SAAZ,CAAJ,EAA4B;AACxBM,MAAAA,oBAAoB,GAAG;AACnBN,QAAAA,SADmB;AAEnBE,QAAAA,WAFmB;AAGnBD,QAAAA,YAHmB;AAInBE,QAAAA,kBAJmB;AAKnBC,QAAAA,YALmB;AAMnBC,QAAAA,eANmB;AAOnBE,QAAAA,QAAQ,EAAEX,KAAK,CAACF,KAAN,CAAYM,SAAZ,EAAuBO,QAAvB,GAAkC;AAPzB,OAAvB;AASH,KAVD,MAUO;AACHD,MAAAA,oBAAoB,GAAG;AACnBN,QAAAA,SADmB;AAEnBE,QAAAA,WAFmB;AAGnBD,QAAAA,YAHmB;AAInBE,QAAAA,kBAJmB;AAKnBC,QAAAA,YALmB;AAMnBC,QAAAA,eANmB;AAOnBE,QAAAA,QAAQ,EAAE;AAPS,OAAvB;AASH;;AAED,6BACOX,KADP;AAEIF,MAAAA,KAAK,oBAAOE,KAAK,CAACF,KAAb;AAAoB,SAACM,SAAD,GAAaM;AAAjC;AAFT;AAIH;AAtC2C,CAAf,CAAjC;AAyCA,eAAeX,WAAf","sourcesContent":["import { ADD_TO_CART } from \"../actions/cart\";\n\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst initialState = {\n    items: {}\n};\n\nconst cartReducer = createReducer(initialState, {\n    [ADD_TO_CART]: (state, action) => {\n        const addedProduct = action.payload;\n        const productId = addedProduct.productId;\n        const productPrice = addedProduct.productPrice;\n        const productName = addedProduct.productName;\n        const productDescription = addedProduct.productDescription;\n        const productImage = addedProduct.productImage;\n        const productCategory = addedProduct.productCategory;\n\n        let updatedOrNewCartItem;\n\n        if (state.items[productId]) {\n            updatedOrNewCartItem = {\n                productId,\n                productName,\n                productPrice,\n                productDescription,\n                productImage,\n                productCategory,\n                quantity: state.items[productId].quantity + 1\n            }\n        } else {\n            updatedOrNewCartItem = {\n                productId,\n                productName,\n                productPrice,\n                productDescription,\n                productImage,\n                productCategory,\n                quantity: 1\n            }\n        }\n\n        return {\n            ...state,\n            items: { ...state.items, [productId]: updatedOrNewCartItem },\n        };\n    }\n})\n\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}