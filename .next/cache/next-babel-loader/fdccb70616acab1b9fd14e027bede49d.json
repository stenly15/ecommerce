{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_TO_CART } from \"../actions/cart\";\nimport CartItem from '../../models/product';\nimport { createReducer } from '@reduxjs/toolkit';\nvar initialState = {\n  items: {}\n};\nvar cartReducer = createReducer(initialState, _defineProperty({}, ADD_TO_CART, function (state, action) {\n  var addedProduct = action.payload;\n  var prodId = addedProduct.productId;\n  var prodPrice = addedProduct.productPrice;\n  var prodName = addedProduct.productName;\n  console.log(addedProduct);\n  var updatedOrNewCartItem;\n\n  if (state.items[addedProduct.productId]) {\n    // already have the item in the cart\n    updatedOrNewCartItem = new CartItem(prodPrice, prodName, state.items[addedProduct.productId].quantity + 1);\n  } else {\n    updatedOrNewCartItem = new CartItem(1, prodPrice, prodName);\n  }\n\n  return _objectSpread({}, state, {\n    items: _objectSpread({}, state.items, _defineProperty({}, addedProduct.productId, updatedOrNewCartItem))\n  });\n}));\nexport default cartReducer;","map":{"version":3,"sources":["/Users/mayrra/Workspace/hctive/ecommerce/store/reducers/cart.js"],"names":["ADD_TO_CART","CartItem","createReducer","initialState","items","cartReducer","state","action","addedProduct","payload","prodId","productId","prodPrice","productPrice","prodName","productName","console","log","updatedOrNewCartItem","quantity"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,IAAMC,WAAW,GAAGH,aAAa,CAACC,YAAD,sBAC5BH,WAD4B,EACd,UAACM,KAAD,EAAQC,MAAR,EAAmB;AAC9B,MAAMC,YAAY,GAAGD,MAAM,CAACE,OAA5B;AACA,MAAMC,MAAM,GAAGF,YAAY,CAACG,SAA5B;AACA,MAAMC,SAAS,GAAGJ,YAAY,CAACK,YAA/B;AACA,MAAMC,QAAQ,GAAGN,YAAY,CAACO,WAA9B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYT,YAAZ;AACA,MAAIU,oBAAJ;;AAEA,MAAIZ,KAAK,CAACF,KAAN,CAAYI,YAAY,CAACG,SAAzB,CAAJ,EAAyC;AACrC;AACAO,IAAAA,oBAAoB,GAAG,IAAIjB,QAAJ,CAEnBW,SAFmB,EAGnBE,QAHmB,EAInBR,KAAK,CAACF,KAAN,CAAYI,YAAY,CAACG,SAAzB,EAAoCQ,QAApC,GAA+C,CAJ5B,CAAvB;AAMH,GARD,MAQO;AACHD,IAAAA,oBAAoB,GAAG,IAAIjB,QAAJ,CAAa,CAAb,EAAgBW,SAAhB,EAA2BE,QAA3B,CAAvB;AACH;;AAED,2BACOR,KADP;AAEIF,IAAAA,KAAK,oBAAOE,KAAK,CAACF,KAAb,sBAAqBI,YAAY,CAACG,SAAlC,EAA8CO,oBAA9C;AAFT;AAIH,CA1B4B,EAAjC;AA6BA,eAAeb,WAAf","sourcesContent":["import { ADD_TO_CART } from \"../actions/cart\";\nimport CartItem from '../../models/product';\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst initialState = {\n    items: {}\n};\n\nconst cartReducer = createReducer(initialState, {\n    [ADD_TO_CART]: (state, action) => {\n        const addedProduct = action.payload;\n        const prodId = addedProduct.productId;\n        const prodPrice = addedProduct.productPrice;\n        const prodName = addedProduct.productName;\n\n        console.log(addedProduct)\n        let updatedOrNewCartItem;\n\n        if (state.items[addedProduct.productId]) {\n            // already have the item in the cart\n            updatedOrNewCartItem = new CartItem(\n\n                prodPrice,\n                prodName,\n                state.items[addedProduct.productId].quantity + 1,\n            );\n        } else {\n            updatedOrNewCartItem = new CartItem(1, prodPrice, prodName);\n        }\n\n        return {\n            ...state,\n            items: { ...state.items, [addedProduct.productId]: updatedOrNewCartItem },\n        };\n    }\n})\n\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}