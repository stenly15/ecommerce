{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_TO_CART } from \"../actions/cart\";\nimport { createReducer } from '@reduxjs/toolkit';\nconst initialState = {\n  items: {}\n};\nconst cartReducer = createReducer(initialState, {\n  [ADD_TO_CART]: (state, action) => {\n    const {\n      productId,\n      productName,\n      productPrice,\n      productDescription,\n      productImage,\n      productCategory\n    } = action.payload;\n    let updatedOrNewCartItem;\n\n    if (state.items[productId]) {\n      updatedOrNewCartItem = {\n        productId,\n        productName,\n        productPrice,\n        productDescription,\n        productImage,\n        productCategory,\n        quantity: state.items[productId].quantity + 1\n      };\n    } else {\n      updatedOrNewCartItem = {\n        productId,\n        productName,\n        productPrice,\n        productDescription,\n        productImage,\n        productCategory,\n        quantity: 1\n      };\n    }\n\n    return _objectSpread({}, state, {\n      items: _objectSpread({}, state.items, {\n        [productId]: updatedOrNewCartItem\n      })\n    });\n  }\n});\nexport default cartReducer;","map":{"version":3,"sources":["/Users/mayrra/Workspace/hctive/ecommerce/store/reducers/cart.js"],"names":["ADD_TO_CART","createReducer","initialState","items","cartReducer","state","action","productId","productName","productPrice","productDescription","productImage","productCategory","payload","updatedOrNewCartItem","quantity"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,iBAA5B;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,MAAMC,WAAW,GAAGH,aAAa,CAACC,YAAD,EAAe;AAC5C,GAACF,WAAD,GAAe,CAACK,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAM;AACFC,MAAAA,SADE;AAEFC,MAAAA,WAFE;AAGFC,MAAAA,YAHE;AAIFC,MAAAA,kBAJE;AAKFC,MAAAA,YALE;AAMFC,MAAAA;AANE,QAOFN,MAAM,CAACO,OAPX;AASA,QAAIC,oBAAJ;;AAEA,QAAIT,KAAK,CAACF,KAAN,CAAYI,SAAZ,CAAJ,EAA4B;AACxBO,MAAAA,oBAAoB,GAAG;AACnBP,QAAAA,SADmB;AAEnBC,QAAAA,WAFmB;AAGnBC,QAAAA,YAHmB;AAInBC,QAAAA,kBAJmB;AAKnBC,QAAAA,YALmB;AAMnBC,QAAAA,eANmB;AAOnBG,QAAAA,QAAQ,EAAEV,KAAK,CAACF,KAAN,CAAYI,SAAZ,EAAuBQ,QAAvB,GAAkC;AAPzB,OAAvB;AASH,KAVD,MAUO;AACHD,MAAAA,oBAAoB,GAAG;AACnBP,QAAAA,SADmB;AAEnBC,QAAAA,WAFmB;AAGnBC,QAAAA,YAHmB;AAInBC,QAAAA,kBAJmB;AAKnBC,QAAAA,YALmB;AAMnBC,QAAAA,eANmB;AAOnBG,QAAAA,QAAQ,EAAE;AAPS,OAAvB;AASH;;AAED,6BACOV,KADP;AAEIF,MAAAA,KAAK,oBAAOE,KAAK,CAACF,KAAb;AAAoB,SAACI,SAAD,GAAaO;AAAjC;AAFT;AAIH;AAvC2C,CAAf,CAAjC;AA0CA,eAAeV,WAAf","sourcesContent":["import { ADD_TO_CART } from \"../actions/cart\";\n\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst initialState = {\n    items: {}\n};\n\nconst cartReducer = createReducer(initialState, {\n    [ADD_TO_CART]: (state, action) => {\n        const {\n            productId,\n            productName,\n            productPrice,\n            productDescription,\n            productImage,\n            productCategory\n        } = action.payload;\n\n        let updatedOrNewCartItem;\n\n        if (state.items[productId]) {\n            updatedOrNewCartItem = {\n                productId,\n                productName,\n                productPrice,\n                productDescription,\n                productImage,\n                productCategory,\n                quantity: state.items[productId].quantity + 1\n            }\n        } else {\n            updatedOrNewCartItem = {\n                productId,\n                productName,\n                productPrice,\n                productDescription,\n                productImage,\n                productCategory,\n                quantity: 1\n            }\n        }\n\n        return {\n            ...state,\n            items: { ...state.items, [productId]: updatedOrNewCartItem },\n        };\n    }\n})\n\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}