{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_TO_CART } from \"../actions/cart\";\nimport CartItem from '../../models/product';\nimport { createReducer } from '@reduxjs/toolkit';\nvar initialState = {\n  items: {}\n};\nvar cartReducer = createReducer(initialState, _defineProperty({}, ADD_TO_CART, function (state, action) {\n  var addedProduct = action.payload;\n  var productId = addedProduct.productId;\n  var productPrice = addedProduct.productPrice;\n  var productName = addedProduct.productName; // console.log(addedProduct)\n\n  var updatedOrNewCartItem;\n\n  if (state.items[productId]) {\n    updatedOrNewCartItem = {\n      productId: productId,\n      productPrice: productPrice,\n      productName: productName,\n      quantity: quantity + 1\n    };\n  } else {\n    updatedOrNewCartItem = {\n      productId: productId,\n      productPrice: productPrice,\n      productName: productName,\n      quantity: 1\n    }; // updatedOrNewCartItem = new CartItem(prodId, prodName, prodPrice, 1);\n  }\n\n  return _objectSpread({}, state, {\n    items: _objectSpread({}, state.items, _defineProperty({}, productId, updatedOrNewCartItem))\n  });\n}));\nexport default cartReducer;","map":{"version":3,"sources":["/Users/mayrra/Workspace/hctive/ecommerce/store/reducers/cart.js"],"names":["ADD_TO_CART","CartItem","createReducer","initialState","items","cartReducer","state","action","addedProduct","payload","productId","productPrice","productName","updatedOrNewCartItem","quantity"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,IAAMC,WAAW,GAAGH,aAAa,CAACC,YAAD,sBAC5BH,WAD4B,EACd,UAACM,KAAD,EAAQC,MAAR,EAAmB;AAC9B,MAAMC,YAAY,GAAGD,MAAM,CAACE,OAA5B;AACA,MAAMC,SAAS,GAAGF,YAAY,CAACE,SAA/B;AACA,MAAMC,YAAY,GAAGH,YAAY,CAACG,YAAlC;AACA,MAAMC,WAAW,GAAGJ,YAAY,CAACI,WAAjC,CAJ8B,CAM9B;;AACA,MAAIC,oBAAJ;;AAEA,MAAIP,KAAK,CAACF,KAAN,CAAYM,SAAZ,CAAJ,EAA4B;AACxBG,IAAAA,oBAAoB,GAAG;AACnBH,MAAAA,SAAS,EAATA,SADmB;AAEnBC,MAAAA,YAAY,EAAZA,YAFmB;AAGnBC,MAAAA,WAAW,EAAXA,WAHmB;AAInBE,MAAAA,QAAQ,EAAEA,QAAQ,GAAG;AAJF,KAAvB;AAMH,GAPD,MAOO;AACHD,IAAAA,oBAAoB,GAAG;AACnBH,MAAAA,SAAS,EAATA,SADmB;AAEnBC,MAAAA,YAAY,EAAZA,YAFmB;AAGnBC,MAAAA,WAAW,EAAXA,WAHmB;AAInBE,MAAAA,QAAQ,EAAE;AAJS,KAAvB,CADG,CAOH;AACH;;AAED,2BACOR,KADP;AAEIF,IAAAA,KAAK,oBAAOE,KAAK,CAACF,KAAb,sBAAqBM,SAArB,EAAiCG,oBAAjC;AAFT;AAIH,CA/B4B,EAAjC;AAkCA,eAAeR,WAAf","sourcesContent":["import { ADD_TO_CART } from \"../actions/cart\";\nimport CartItem from '../../models/product';\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst initialState = {\n    items: {}\n};\n\nconst cartReducer = createReducer(initialState, {\n    [ADD_TO_CART]: (state, action) => {\n        const addedProduct = action.payload;\n        const productId = addedProduct.productId;\n        const productPrice = addedProduct.productPrice;\n        const productName = addedProduct.productName;\n\n        // console.log(addedProduct)\n        let updatedOrNewCartItem;\n\n        if (state.items[productId]) {\n            updatedOrNewCartItem = {\n                productId,\n                productPrice,\n                productName,\n                quantity: quantity + 1\n            }\n        } else {\n            updatedOrNewCartItem = {\n                productId,\n                productPrice,\n                productName,\n                quantity: 1\n            }\n            // updatedOrNewCartItem = new CartItem(prodId, prodName, prodPrice, 1);\n        }\n\n        return {\n            ...state,\n            items: { ...state.items, [productId]: updatedOrNewCartItem },\n        };\n    }\n})\n\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}