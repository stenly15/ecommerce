{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_TO_CART } from \"../actions/cart\";\nimport CartItem from '../../models/product';\nimport { createReducer } from '@reduxjs/toolkit';\nconst initialState = {\n  items: {}\n};\nconst cartReducer = createReducer(initialState, {\n  [ADD_TO_CART]: (state, action) => {\n    const addedProduct = action.payload; // console.log(addedProduct)\n\n    let updatedOrNewCartItem;\n\n    if (state.items[addedProduct.id]) {\n      // already have the item in the cart\n      updatedOrNewCartItem = new CartItem(state.items[addedProduct.id].quantity + 1, prodPrice, prodTitle, state.items[addedProduct.id].sum + prodPrice);\n    } else {\n      updatedOrNewCartItem = new CartItem(1, prodPrice, prodTitle, prodPrice);\n    }\n\n    return _objectSpread({}, state, {\n      items: _objectSpread({}, state.items, {\n        [addedProduct.id]: updatedOrNewCartItem\n      })\n    });\n  }\n});\nexport default cartReducer;","map":{"version":3,"sources":["/Users/mayrra/Workspace/hctive/ecommerce/store/reducers/cart.js"],"names":["ADD_TO_CART","CartItem","createReducer","initialState","items","cartReducer","state","action","addedProduct","payload","updatedOrNewCartItem","id","quantity","prodPrice","prodTitle","sum"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,MAAMC,WAAW,GAAGH,aAAa,CAACC,YAAD,EAAe;AAC5C,GAACH,WAAD,GAAe,CAACM,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAMC,YAAY,GAAGD,MAAM,CAACE,OAA5B,CAD8B,CAE9B;;AACA,QAAIC,oBAAJ;;AAEA,QAAIJ,KAAK,CAACF,KAAN,CAAYI,YAAY,CAACG,EAAzB,CAAJ,EAAkC;AAC9B;AACAD,MAAAA,oBAAoB,GAAG,IAAIT,QAAJ,CACnBK,KAAK,CAACF,KAAN,CAAYI,YAAY,CAACG,EAAzB,EAA6BC,QAA7B,GAAwC,CADrB,EAEnBC,SAFmB,EAGnBC,SAHmB,EAInBR,KAAK,CAACF,KAAN,CAAYI,YAAY,CAACG,EAAzB,EAA6BI,GAA7B,GAAmCF,SAJhB,CAAvB;AAMH,KARD,MAQO;AACHH,MAAAA,oBAAoB,GAAG,IAAIT,QAAJ,CAAa,CAAb,EAAgBY,SAAhB,EAA2BC,SAA3B,EAAsCD,SAAtC,CAAvB;AACH;;AAED,6BACOP,KADP;AAEIF,MAAAA,KAAK,oBAAOE,KAAK,CAACF,KAAb;AAAoB,SAACI,YAAY,CAACG,EAAd,GAAmBD;AAAvC;AAFT;AAIH;AAtB2C,CAAf,CAAjC;AAyBA,eAAeL,WAAf","sourcesContent":["import { ADD_TO_CART } from \"../actions/cart\";\nimport CartItem from '../../models/product';\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst initialState = {\n    items: {}\n};\n\nconst cartReducer = createReducer(initialState, {\n    [ADD_TO_CART]: (state, action) => {\n        const addedProduct = action.payload;\n        // console.log(addedProduct)\n        let updatedOrNewCartItem;\n\n        if (state.items[addedProduct.id]) {\n            // already have the item in the cart\n            updatedOrNewCartItem = new CartItem(\n                state.items[addedProduct.id].quantity + 1,\n                prodPrice,\n                prodTitle,\n                state.items[addedProduct.id].sum + prodPrice\n            );\n        } else {\n            updatedOrNewCartItem = new CartItem(1, prodPrice, prodTitle, prodPrice);\n        }\n\n        return {\n            ...state,\n            items: { ...state.items, [addedProduct.id]: updatedOrNewCartItem },\n        };\n    }\n})\n\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}